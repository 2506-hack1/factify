name: 🚀 Super Fast CI/CD Pipeline

on:
  push:
    branches:
      - main
  # プルリクエスト時の差分チェック用
  pull_request:
    branches:
      - main

env:
  AWS_REGION: ap-northeast-1
  # キャッシュ最適化用
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '22'

jobs:
  # 🔍 変更検出ジョブ（並列実行の最適化用）
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      api-changed: ${{ steps.changes.outputs.api }}
      infra-changed: ${{ steps.changes.outputs.infra }}
      webapp-changed: ${{ steps.changes.outputs.webapp }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            api:
              - 'api/**'
            infra:
              - 'infra/**'
            webapp:
              - 'webapp/**'

  # ⚡ 並列デプロイジョブ
  deploy-infrastructure:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.infra-changed == 'true' || needs.detect-changes.outputs.api-changed == 'true'
    permissions:
      id-token: write
      contents: read
    outputs:
      api-endpoint: ${{ steps.get-api-endpoint.outputs.api_endpoint }}

    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: github-actions-cdk-deploy-session

      - name: 🐍 Setup Python with cache
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Setup Node.js with cache
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: infra/package-lock.json

      - name: ⚡ Install CDK CLI (cached)
        run: npm install -g aws-cdk

      - name: 🏗️ Install CDK dependencies (optimized)
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip --no-cache-dir
          pip install -r requirements.txt --no-cache-dir
        working-directory: ./infra

      - name: 🚀 CDK Deploy (optimized with hotswap)
        env:
          DOCKER_BUILDKIT: 1
        run: |
          source .venv/bin/activate
          # ホットスワップ機能で高速デプロイ
          cdk deploy --all --require-approval never --app "python3 app.py" \
            --hotswap --progress events --concurrency 10
        working-directory: ./infra

      - name: 🌐 Get API endpoint from ECS service
        id: get-api-endpoint
        run: |
          # ECSサービスからパブリックIPを取得
          SERVICE_ARN=$(aws ecs list-services --cluster fastapi-cluster --query 'serviceArns[0]' --output text)
          TASK_ARN=$(aws ecs list-tasks --cluster fastapi-cluster --service-name "$SERVICE_ARN" --query 'taskArns[0]' --output text)
          PUBLIC_IP=$(aws ecs describe-tasks --cluster fastapi-cluster --tasks "$TASK_ARN" --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' --output text | xargs -I {} aws ec2 describe-network-interfaces --network-interface-ids {} --query 'NetworkInterfaces[0].Association.PublicIp' --output text)
          echo "api_endpoint=http://$PUBLIC_IP" >> $GITHUB_OUTPUT

  # 🌐 Webアプリデプロイ（並列実行）
  deploy-webapp:
    runs-on: ubuntu-latest
    needs: [detect-changes, deploy-infrastructure]
    if: needs.detect-changes.outputs.webapp-changed == 'true' || needs.detect-changes.outputs.api-changed == 'true'
    permissions:
      id-token: write
      contents: read

    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: github-actions-webapp-deploy-session

      - name: 📦 Setup Node.js with cache
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: webapp/package-lock.json

      - name: ⚡ Install webapp dependencies (optimized)
        run: npm ci --prefer-offline --no-audit
        working-directory: ./webapp

      - name: 🏗️ Build webapp with API endpoint
        env:
          VITE_API_ENDPOINT: ${{ needs.deploy-infrastructure.outputs.api-endpoint }}
        run: npm run build
        working-directory: ./webapp

      - name: 🚀 Deploy to S3 and invalidate CloudFront
        run: |
          # Get S3 bucket name and CloudFront distribution ID from CDK outputs
          BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name S3CloudFrontStack --query 'Stacks[0].Outputs[?OutputKey==`WebsiteBucketName`].OutputValue' --output text)
          DISTRIBUTION_ID=$(aws cloudformation describe-stacks --stack-name S3CloudFrontStack --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontDistributionId`].OutputValue' --output text)
          
          # Upload files to S3 (parallel)
          aws s3 sync ./webapp/dist/ s3://$BUCKET_NAME --delete --cli-write-timeout 0 --cli-read-timeout 0
          
          # Invalidate CloudFront cache (non-blocking)
          aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*" &

  # 🧪 テストジョブ（並列実行）
  test-api:
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    if: always() && needs.deploy-infrastructure.result == 'success'

    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      - name: 🔍 Test API Health
        run: |
          echo "Testing API at: ${{ needs.deploy-infrastructure.outputs.api-endpoint }}"
          # Wait for service to be ready
          sleep 60
          curl -f "${{ needs.deploy-infrastructure.outputs.api-endpoint }}/health" || exit 1
          echo "✅ API is healthy!"

      - name: 📊 Performance Test
        run: |
          # Simple performance check
          time curl -s "${{ needs.deploy-infrastructure.outputs.api-endpoint }}/health"
